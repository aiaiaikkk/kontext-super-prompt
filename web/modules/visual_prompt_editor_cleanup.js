/**
 * Visual Prompt Editor - ËµÑÊ∫êÊ∏ÖÁêÜÊ®°Âùó
 * Ë¥üË¥£ÂºπÁ™óÂÖ≥Èó≠Êó∂ÁöÑÂÆåÊï¥ËµÑÊ∫êÊ∏ÖÁêÜÔºåÈò≤Ê≠¢ÂÜÖÂ≠òÊ≥ÑÊºèÂíåÊÄßËÉΩÈóÆÈ¢ò
 */

/**
 * Ê®°ÊÄÅÂºπÁ™óÊ∏ÖÁêÜÁÆ°ÁêÜÂô®
 */
export class ModalCleanupManager {
    constructor() {
        this.activeEventListeners = new Map(); // Â≠òÂÇ®Ê¥ªË∑ÉÁöÑ‰∫ã‰ª∂ÁõëÂê¨Âô®
        this.activeTimers = new Set(); // Â≠òÂÇ®Ê¥ªË∑ÉÁöÑÂÆöÊó∂Âô®
        this.activeFabricCanvases = new Set(); // Â≠òÂÇ®FabricÁîªÂ∏ÉÂÆû‰æã
        this.activeImageCache = new Map(); // Â≠òÂÇ®ÂõæÂÉèÁºìÂ≠ò
    }

    /**
     * Ê≥®ÂÜå‰∫ã‰ª∂ÁõëÂê¨Âô®ÔºàÁî®‰∫éÂêéÁª≠Ê∏ÖÁêÜÔºâ
     */
    registerEventListener(element, event, handler, options = {}) {
        const listenerId = `${Date.now()}_${Math.random()}`;
        
        // Ê∑ªÂä†‰∫ã‰ª∂ÁõëÂê¨Âô®
        element.addEventListener(event, handler, options);
        
        // ËÆ∞ÂΩïÁî®‰∫éÊ∏ÖÁêÜ
        this.activeEventListeners.set(listenerId, {
            element,
            event,
            handler,
            options
        });
        
        return listenerId;
    }

    /**
     * Ê≥®ÂÜåÂÆöÊó∂Âô®ÔºàÁî®‰∫éÂêéÁª≠Ê∏ÖÁêÜÔºâ
     */
    registerTimer(timerId, type = 'timeout') {
        this.activeTimers.add({ timerId, type });
        return timerId;
    }

    /**
     * Ê≥®ÂÜåFabricÁîªÂ∏ÉÔºàÁî®‰∫éÂêéÁª≠Ê∏ÖÁêÜÔºâ
     */
    registerFabricCanvas(fabricCanvas) {
        this.activeFabricCanvases.add(fabricCanvas);
    }

    /**
     * Ê≥®ÂÜåÂõæÂÉèÁºìÂ≠òÔºàÁî®‰∫éÂêéÁª≠Ê∏ÖÁêÜÔºâ
     */
    registerImageCache(imageUrl, imageElement) {
        this.activeImageCache.set(imageUrl, imageElement);
    }

    /**
     * ÊâßË°åÂÆåÊï¥Ê∏ÖÁêÜ - Èò≤Ê≠¢ÂÜÖÂ≠òÊ≥ÑÊºèÂíåÊÄßËÉΩÈóÆÈ¢ò
     */
    performCompleteCleanup() {
        console.log('üßπ ÂºÄÂßãÊâßË°åÊ®°ÊÄÅÂºπÁ™óËµÑÊ∫êÊ∏ÖÁêÜ...');
        
        // 1. Ê∏ÖÁêÜ‰∫ã‰ª∂ÁõëÂê¨Âô®
        this.cleanupEventListeners();
        
        // 2. Ê∏ÖÁêÜÂÆöÊó∂Âô®
        this.cleanupTimers();
        
        // 3. Ê∏ÖÁêÜFabricÁîªÂ∏É
        this.cleanupFabricCanvases();
        
        // 4. Ê∏ÖÁêÜÂõæÂÉèÁºìÂ≠ò
        this.cleanupImageCache();
        
        // 5. Ê∏ÖÁêÜCSSÂä®Áîª
        this.cleanupCSSAnimations();
        
        // 6. Âº∫Âà∂ÂûÉÂúæÂõûÊî∂ÊèêÁ§∫
        this.forceGarbageCollection();
        
        console.log('‚úÖ Ê®°ÊÄÅÂºπÁ™óËµÑÊ∫êÊ∏ÖÁêÜÂÆåÊàê');
    }

    /**
     * Ê∏ÖÁêÜÊâÄÊúâÊ≥®ÂÜåÁöÑ‰∫ã‰ª∂ÁõëÂê¨Âô®
     */
    cleanupEventListeners() {
        console.log(`üóëÔ∏è Ê∏ÖÁêÜ ${this.activeEventListeners.size} ‰∏™‰∫ã‰ª∂ÁõëÂê¨Âô®`);
        
        for (const [listenerId, listener] of this.activeEventListeners) {
            try {
                listener.element.removeEventListener(
                    listener.event, 
                    listener.handler, 
                    listener.options
                );
            } catch (error) {
                console.warn(`Ê∏ÖÁêÜ‰∫ã‰ª∂ÁõëÂê¨Âô®Â§±Ë¥• ${listenerId}:`, error);
            }
        }
        
        this.activeEventListeners.clear();
    }

    /**
     * Ê∏ÖÁêÜÊâÄÊúâÊ≥®ÂÜåÁöÑÂÆöÊó∂Âô®
     */
    cleanupTimers() {
        console.log(`‚è∞ Ê∏ÖÁêÜ ${this.activeTimers.size} ‰∏™ÂÆöÊó∂Âô®`);
        
        for (const timer of this.activeTimers) {
            try {
                if (timer.type === 'timeout') {
                    clearTimeout(timer.timerId);
                } else if (timer.type === 'interval') {
                    clearInterval(timer.timerId);
                }
            } catch (error) {
                console.warn(`Ê∏ÖÁêÜÂÆöÊó∂Âô®Â§±Ë¥• ${timer.timerId}:`, error);
            }
        }
        
        this.activeTimers.clear();
    }

    /**
     * Ê∏ÖÁêÜFabricÁîªÂ∏ÉÂÆû‰æã
     * üîß Â¢ûÂº∫base64Êï∞ÊçÆÊ∏ÖÁêÜ + ÁªïËøáFabric.jsÂÜÖÈÉ®ÈîôËØØ
     */
    cleanupFabricCanvases() {
        console.log(`üé® Ê∏ÖÁêÜ ${this.activeFabricCanvases.size} ‰∏™FabricÁîªÂ∏É`);
        
        for (const fabricCanvas of this.activeFabricCanvases) {
            try {
                // üóëÔ∏è ÁâπÂà´Ê∏ÖÁêÜÔºöËé∑ÂèñÂπ∂Ê∏ÖÁêÜÊâÄÊúâÂØπË±°ÁöÑbase64Êï∞ÊçÆ
                const objects = fabricCanvas.getObjects ? fabricCanvas.getObjects().filter(obj => !obj.isLockIndicator && !obj.skipInLayerList) : [];
                objects.forEach(obj => {
                    if (obj.type === 'image' && obj._element) {
                        // Ê∏ÖÁêÜÂõæÂÉèÂÖÉÁ¥†ÁöÑsrc
                        if (obj._element.src && obj._element.src.startsWith('data:')) {
                            obj._element.src = '';
                        }
                        obj._element = null;
                    }
                    // Ê∏ÖÁêÜÂØπË±°ÁöÑÊâÄÊúâÂºïÁî®
                    obj.canvas = null;
                    obj._objects = null;
                });
                
                // Ê∏ÖÁêÜÁîªÂ∏ÉËÉåÊôØÂõæÂÉèÔºàÂ¶ÇÊûúÊúâÔºâ
                if (fabricCanvas.backgroundImage) {
                    if (fabricCanvas.backgroundImage._element && fabricCanvas.backgroundImage._element.src) {
                        fabricCanvas.backgroundImage._element.src = '';
                    }
                    fabricCanvas.backgroundImage = null;
                }
                
                // üîß ÁªïËøáFabric.jsÁöÑclearÊñπÊ≥ïÔºåÁõ¥Êé•Ê∏ÖÁêÜÂØπË±°
                try {
                    if (fabricCanvas._objects && Array.isArray(fabricCanvas._objects)) {
                        fabricCanvas._objects.length = 0;
                    }
                    if (fabricCanvas.renderOnAddRemove !== undefined) {
                        fabricCanvas.renderOnAddRemove = false;
                    }
                } catch (e) {
                    console.warn('Direct object clearing failed:', e);
                }
                
                // üîß ÂÆâÂÖ®ÁöÑ‰∫ã‰ª∂ÁõëÂê¨Âô®Ê∏ÖÁêÜ
                try {
                    // Ê∏ÖÁêÜ‰∫ã‰ª∂ÁõëÂê¨Âô®Êò†Â∞Ñ
                    if (fabricCanvas.__eventListeners) {
                        fabricCanvas.__eventListeners = {};
                    }
                    // Â∞ùËØïË∞ÉÁî®offÊñπÊ≥ïÔºå‰ΩÜ‰∏çÊäõÂá∫ÈîôËØØ
                    if (fabricCanvas.off && typeof fabricCanvas.off === 'function') {
                        try {
                            fabricCanvas.off();
                        } catch (innerError) {
                            // ÈùôÈªòÂ§ÑÁêÜÂÜÖÈÉ®ÈîôËØØ
                        }
                    }
                } catch (e) {
                    console.warn('Event listener cleanup failed:', e);
                }
                
                // üîß Áõ¥Êé•DOMÊìç‰ΩúÔºåÁªïËøáFabric.jsÂÜÖÈÉ®Ê∏ÖÁêÜ
                this._directCanvasCleanup(fabricCanvas);
                
                // üîß Âª∂ËøüÈîÄÊØÅÔºåÈÅøÂÖçÁ´û‰∫âÊù°‰ª∂
                setTimeout(() => {
                    this._safeDisposeCanvas(fabricCanvas);
                }, 100);
                
            } catch (error) {
                console.warn('Ê∏ÖÁêÜFabricÁîªÂ∏ÉÂ§±Ë¥•:', error);
            }
        }
        
        this.activeFabricCanvases.clear();
    }
    
    /**
     * Áõ¥Êé•Ê∏ÖÁêÜCanvas DOMÂÖÉÁ¥†ÔºåÁªïËøáFabric.js
     */
    _directCanvasCleanup(fabricCanvas) {
        try {
            // Áõ¥Êé•Êìç‰Ωúlower canvas
            const lowerCanvas = fabricCanvas.lowerCanvasEl;
            if (lowerCanvas) {
                // ‰øùÂ≠òÂéüÂßãÂ∞∫ÂØ∏‰ø°ÊÅØ
                const width = lowerCanvas.width || 0;
                const height = lowerCanvas.height || 0;
                
                // ÂÆâÂÖ®Ëé∑Âèñ‰∏ä‰∏ãÊñá
                let ctx = null;
                try {
                    ctx = lowerCanvas.getContext('2d');
                } catch (e) {
                    console.warn('Failed to get 2d context:', e);
                }
                
                // Âè™ÊúâÂú®‰∏ä‰∏ãÊñáÂ≠òÂú®‰∏îÊúâÂ∞∫ÂØ∏Êó∂ÊâçÊ∏ÖÁêÜ
                if (ctx && width > 0 && height > 0) {
                    try {
                        // Â°´ÂÖÖÈÄèÊòéËâ≤ËÄå‰∏çÊòØclearRect
                        ctx.fillStyle = 'rgba(0,0,0,0)';
                        ctx.fillRect(0, 0, width, height);
                    } catch (e) {
                        console.warn('Context fill failed:', e);
                    }
                }
                
                // ‰ªéDOM‰∏≠ÁßªÈô§ÔºàÂ¶ÇÊûúÂ≠òÂú®Áà∂ËäÇÁÇπÔºâ
                if (lowerCanvas.parentNode) {
                    try {
                        lowerCanvas.parentNode.removeChild(lowerCanvas);
                    } catch (e) {
                        console.warn('Failed to remove lower canvas from DOM:', e);
                    }
                }
            }
            
            // Áõ¥Êé•Êìç‰Ωúupper canvas
            const upperCanvas = fabricCanvas.upperCanvasEl;
            if (upperCanvas) {
                const width = upperCanvas.width || 0;
                const height = upperCanvas.height || 0;
                
                let ctx = null;
                try {
                    ctx = upperCanvas.getContext('2d');
                } catch (e) {
                    console.warn('Failed to get upper 2d context:', e);
                }
                
                if (ctx && width > 0 && height > 0) {
                    try {
                        ctx.fillStyle = 'rgba(0,0,0,0)';
                        ctx.fillRect(0, 0, width, height);
                    } catch (e) {
                        console.warn('Upper context fill failed:', e);
                    }
                }
                
                if (upperCanvas.parentNode) {
                    try {
                        upperCanvas.parentNode.removeChild(upperCanvas);
                    } catch (e) {
                        console.warn('Failed to remove upper canvas from DOM:', e);
                    }
                }
            }
            
            // Ê∏ÖÁêÜcontainer canvas
            const containerCanvas = fabricCanvas.getElement && fabricCanvas.getElement();
            if (containerCanvas && containerCanvas !== lowerCanvas && containerCanvas !== upperCanvas) {
                if (containerCanvas.parentNode) {
                    try {
                        containerCanvas.parentNode.removeChild(containerCanvas);
                    } catch (e) {
                        console.warn('Failed to remove container canvas from DOM:', e);
                    }
                }
            }
            
        } catch (error) {
            console.warn('Direct canvas cleanup failed:', error);
        }
    }
    
    /**
     * ÂÆâÂÖ®ÈîÄÊØÅCanvasÂÆû‰æã
     */
    _safeDisposeCanvas(fabricCanvas) {
        try {
            // Âú®Â∞ùËØïdispose‰πãÂâçÔºåÂÖàÊ∏ÖÈô§ÊâÄÊúâÂºïÁî®
            fabricCanvas.lowerCanvasEl = null;
            fabricCanvas.upperCanvasEl = null;
            fabricCanvas.contextContainer = null;
            fabricCanvas.contextTop = null;
            fabricCanvas.wrapperEl = null;
            
            // Áé∞Âú®Â∞ùËØïË∞ÉÁî®dispose
            if (fabricCanvas.dispose && typeof fabricCanvas.dispose === 'function') {
                fabricCanvas.dispose();
            }
        } catch (error) {
            // Âç≥‰ΩødisposeÂ§±Ë¥•ÔºåÊàë‰ª¨‰πüÂ∑≤ÁªèÊ∏ÖÁêÜ‰∫Ü‰∏ªË¶ÅËµÑÊ∫ê
            console.warn('Canvas dispose failed, but resources were cleared:', error);
        }
    }

    /**
     * Ê∏ÖÁêÜÂõæÂÉèÁºìÂ≠ò
     * üîß Â¢ûÂº∫Ê∏ÖÁêÜbase64ÂíåblobÊï∞ÊçÆ
     */
    cleanupImageCache() {
        console.log(`üñºÔ∏è Ê∏ÖÁêÜ ${this.activeImageCache.size} ‰∏™ÂõæÂÉèÁºìÂ≠ò`);
        
        for (const [imageUrl, imageElement] of this.activeImageCache) {
            try {
                // Ê∏ÖÁêÜÂõæÂÉèÂÖÉÁ¥†
                if (imageElement) {
                    imageElement.src = '';
                    imageElement.onload = null;
                    imageElement.onerror = null;
                    // üóëÔ∏è ÁßªÈô§DOMÂºïÁî®
                    if (imageElement.parentNode) {
                        imageElement.parentNode.removeChild(imageElement);
                    }
                }
                
                // Â¶ÇÊûúÊòØblob URLÔºåÈáäÊîæÂÆÉ
                if (imageUrl.startsWith('blob:')) {
                    URL.revokeObjectURL(imageUrl);
                }
                
                // üóëÔ∏è ÁâπÂà´Â§ÑÁêÜbase64 URL
                if (imageUrl.startsWith('data:')) {
                    // base64Êï∞ÊçÆÊó†Ê≥ïÁõ¥Êé•ÈáäÊîæÔºå‰ΩÜÂèØ‰ª•Ê∏ÖÁêÜÂºïÁî®
                    console.log(`üóëÔ∏è Cleared base64 data reference: ${(imageUrl.length / 1024).toFixed(1)}KB`);
                }
                
            } catch (error) {
                console.warn(`Ê∏ÖÁêÜÂõæÂÉèÁºìÂ≠òÂ§±Ë¥• ${imageUrl}:`, error);
            }
        }
        
        this.activeImageCache.clear();
        
        // üóëÔ∏è Ê∏ÖÁêÜÊâÄÊúâÂèØËÉΩÁöÑÂÖ®Â±ÄÂõæÂÉèÂºïÁî®
        this.cleanupGlobalImageReferences();
    }

    /**
     * Ê∏ÖÁêÜCSSÂä®Áîª
     */
    cleanupCSSAnimations() {
        // ÂÅúÊ≠¢ÊâÄÊúâÂèØËÉΩÁöÑCSSÂä®Áîª
        const modalElements = document.querySelectorAll('#unified-editor-modal, #unified-editor-modal *');
        modalElements.forEach(element => {
            try {
                element.style.animation = 'none';
                element.style.transition = 'none';
            } catch (error) {
                // ÂøΩÁï•ÂÖÉÁ¥†Â∑≤Ë¢´Âà†Èô§ÁöÑÈîôËØØ
            }
        });
    }

    /**
     * Ê∏ÖÁêÜÂÖ®Â±ÄÂõæÂÉèÂºïÁî®
     */
    cleanupGlobalImageReferences() {
        // Ê∏ÖÁêÜÊâÄÊúâÂÖ∑Êúâbase64Êï∞ÊçÆÁöÑimgÂÖÉÁ¥†
        const allImages = document.querySelectorAll('img[src^="data:"]');
        allImages.forEach(img => {
            if (img.src && img.src.length > 10000) { // Âè™Ê∏ÖÁêÜÂ§ßÁöÑbase64ÂõæÂÉè
                console.log(`üóëÔ∏è Cleaning large base64 image: ${(img.src.length / 1024).toFixed(1)}KB`);
                img.src = '';
            }
        });
        
        // Ê∏ÖÁêÜcanvasÂÖÉÁ¥†
        const allCanvases = document.querySelectorAll('canvas');
        allCanvases.forEach(canvas => {
            try {
                const ctx = canvas.getContext('2d');
                if (ctx && canvas.width && canvas.height) {
                    ctx.clearRect(0, 0, canvas.width, canvas.height);
                }
            } catch (e) {
                console.warn('Failed to clear canvas:', e);
            }
        });
    }
    
    /**
     * Âº∫Âà∂ÂûÉÂúæÂõûÊî∂ÊèêÁ§∫
     */
    forceGarbageCollection() {
        // Âú®ÊîØÊåÅÁöÑÊµèËßàÂô®‰∏≠ÊèêÁ§∫ÂûÉÂúæÂõûÊî∂
        if (window.gc && typeof window.gc === 'function') {
            try {
                window.gc();
                console.log('üóëÔ∏è Âº∫Âà∂ÂûÉÂúæÂõûÊî∂Â∑≤ÊâßË°å');
            } catch (error) {
                console.log('üóëÔ∏è ÂûÉÂúæÂõûÊî∂‰∏çÂèØÁî®');
            }
        }
        
        // üóëÔ∏è Âª∂ËøüÊ∏ÖÁêÜÔºàÂáèÂ∞ëÂç°È°øÔºâ
        setTimeout(() => {
            this.immediateGarbageCollection();
        }, 50); // ÂáèÂ∞ëÂª∂ËøüÊó∂Èó¥
    }
    
    /**
     * Á´ãÂç≥ÂûÉÂúæÂõûÊî∂ÔºàÂáèÂ∞ëÂç°È°øÔºâ
     */
    immediateGarbageCollection() {
        try {
            if (window.gc && typeof window.gc === 'function') {
                window.gc();
                console.log('üóëÔ∏è Immediate garbage collection executed');
            }
            
            // È¢ùÂ§ñÊ∏ÖÁêÜÊìç‰Ωú
            if (window.performance && window.performance.memory) {
                const before = window.performance.memory.usedJSHeapSize;
                // Âº∫Âà∂Ëß¶ÂèëÂÜÖÂ≠òÊ∏ÖÁêÜ
                const dummy = new Array(1000).fill(null);
                dummy.length = 0;
                const after = window.performance.memory.usedJSHeapSize;
                console.log(`üóëÔ∏è Memory: ${(before/1024/1024).toFixed(1)}MB -> ${(after/1024/1024).toFixed(1)}MB`);
            }
        } catch (error) {
            console.log('üóëÔ∏è Garbage collection failed:', error);
        }
    }
}

/**
 * ÂÖ®Â±ÄÊ∏ÖÁêÜÁÆ°ÁêÜÂô®ÂÆû‰æã
 */
export const globalCleanupManager = new ModalCleanupManager();

/**
 * üöÄ Â∞ÜÊ∏ÖÁêÜÂáΩÊï∞Êö¥Èú≤Âà∞ÂÖ®Â±Ä‰ΩúÁî®Âüü
 * Á°Æ‰øùÂú®ÂºπÁ™óÂÖ≥Èó≠Êó∂ÂèØ‰ª•ËÆøÈóÆËøô‰∫õÂáΩÊï∞
 */
if (typeof window !== 'undefined') {
    window.registerManagedFabricCanvas = registerManagedFabricCanvas;
    window.performModalCleanup = performModalCleanup;
    window.globalCleanupManager = globalCleanupManager;
}

/**
 * Â¢ûÂº∫ÁöÑ‰∫ã‰ª∂ÁõëÂê¨Âô®Ê≥®ÂÜåÂáΩÊï∞ÔºàËá™Âä®ÁÆ°ÁêÜÊ∏ÖÁêÜÔºâ
 */
export function addManagedEventListener(element, event, handler, options = {}) {
    return globalCleanupManager.registerEventListener(element, event, handler, options);
}

/**
 * Â¢ûÂº∫ÁöÑÂÆöÊó∂Âô®Ê≥®ÂÜåÂáΩÊï∞ÔºàËá™Âä®ÁÆ°ÁêÜÊ∏ÖÁêÜÔºâ
 */
export function addManagedTimeout(callback, delay) {
    const timerId = setTimeout(callback, delay);
    globalCleanupManager.registerTimer(timerId, 'timeout');
    return timerId;
}

export function addManagedInterval(callback, delay) {
    const timerId = setInterval(callback, delay);
    globalCleanupManager.registerTimer(timerId, 'interval');
    return timerId;
}

/**
 * Â¢ûÂº∫ÁöÑFabricÁîªÂ∏ÉÊ≥®ÂÜåÂáΩÊï∞ÔºàËá™Âä®ÁÆ°ÁêÜÊ∏ÖÁêÜÔºâ
 */
export function registerManagedFabricCanvas(fabricCanvas) {
    globalCleanupManager.registerFabricCanvas(fabricCanvas);
}

/**
 * Â¢ûÂº∫ÁöÑÂõæÂÉèÁºìÂ≠òÊ≥®ÂÜåÂáΩÊï∞ÔºàËá™Âä®ÁÆ°ÁêÜÊ∏ÖÁêÜÔºâ
 */
export function registerManagedImageCache(imageUrl, imageElement) {
    globalCleanupManager.registerImageCache(imageUrl, imageElement);
}

/**
 * ÊâßË°åÂÆåÊï¥ÁöÑÊ®°ÊÄÅÂºπÁ™óÊ∏ÖÁêÜ
 */
export function performModalCleanup() {
    // üóëÔ∏è ÁâπÂà´Ê∏ÖÁêÜbase64Êï∞ÊçÆÊ≥ÑÈú≤
    cleanupBase64MemoryLeaks();
    
    globalCleanupManager.performCompleteCleanup();
}

/**
 * ÁâπÂà´ÈíàÂØπbase64ÂÜÖÂ≠òÊ≥ÑÈú≤ÁöÑÊ∏ÖÁêÜÂáΩÊï∞
 */
export function cleanupBase64MemoryLeaks() {
    console.log('üóëÔ∏è ÂºÄÂßãÁâπÂà´Ê∏ÖÁêÜbase64ÂÜÖÂ≠òÊ≥ÑÈú≤...');
    
    try {
        // 1. Ê∏ÖÁêÜÊâÄÊúâÂ§ßÁöÑbase64ÂõæÂÉè
        const largeBase64Images = document.querySelectorAll('img');
        let totalCleaned = 0;
        largeBase64Images.forEach(img => {
            if (img.src && img.src.startsWith('data:image/') && img.src.length > 50000) {
                const sizeMB = (img.src.length / 1024 / 1024).toFixed(2);
                console.log(`üóëÔ∏è Clearing large base64 image: ${sizeMB}MB`);
                img.src = '';
                totalCleaned++;
            }
        });
        
        // 2. Ê∏ÖÁêÜComfyUI widget‰∏≠ÁöÑbase64Êï∞ÊçÆ
        if (window.app && window.app.graph && window.app.graph._nodes) {
            window.app.graph._nodes.forEach(node => {
                if (node.widgets) {
                    node.widgets.forEach(widget => {
                        if (widget.name === 'annotation_data' && widget.value) {
                            try {
                                const data = JSON.parse(widget.value);
                                if (data.canvasImageDataURL && data.canvasImageDataURL.length > 100000) {
                                    const sizeMB = (data.canvasImageDataURL.length / 1024 / 1024).toFixed(2);
                                    console.log(`üóëÔ∏è Found large base64 in widget: ${sizeMB}MB`);
                                    // ‰∏çÁõ¥Êé•Âà†Èô§ÔºåÂè™ÊòØËÆ∞ÂΩï
                                }
                            } catch (e) {
                                // ÂøΩÁï•Ëß£ÊûêÈîôËØØ
                            }
                        }
                    });
                }
            });
        }
        
        // 3. Ê∏ÖÁêÜCanvasÁöÑÂõæÂÉèÊï∞ÊçÆ
        const allCanvases = document.querySelectorAll('canvas');
        allCanvases.forEach(canvas => {
            try {
                const ctx = canvas.getContext('2d');
                if (ctx && canvas.width && canvas.height) {
                    ctx.clearRect(0, 0, canvas.width, canvas.height);
                }
            } catch (e) {
                // ÂøΩÁï•ÈîôËØØ
            }
        });
        
        // 4. Á´ãÂç≥Âº∫Âà∂ÂûÉÂúæÂõûÊî∂ÔºàËß£ÂÜ≥Âç°È°øÈóÆÈ¢òÔºâ
        globalCleanupManager.immediateGarbageCollection();
        
        console.log(`‚úÖ Base64Ê∏ÖÁêÜÂÆåÊàêÔºåÂÖ±Ê∏ÖÁêÜ ${totalCleaned} ‰∏™Â§ßÂûãÂõæÂÉè`);
        
    } catch (error) {
        console.warn('‚ùå Base64Ê∏ÖÁêÜÂá∫Èîô:', error);
    }
}